<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Patrick's Blog</title><link>/</link><description>Recent content on Patrick's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 31 May 2023 21:26:21 +0800</lastBuildDate><atom:link href="/rss.xml" rel="self" type="application/rss+xml"/><item><title>力扣-准时到达的列车最小时速</title><link>/post/ledtcode-1870/</link><pubDate>Wed, 31 May 2023 21:26:21 +0800</pubDate><guid>/post/ledtcode-1870/</guid><description>&lt;h2 id="描述">描述
&lt;a class="header-anchor" href="#%e6%8f%8f%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;p>
&lt;a href="https://leetcode.cn/problems/minimum-speed-to-arrive-on-time/" title="力扣1870" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 力扣1870
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>给你一个浮点数 hour ，表示你到达办公室可用的总通勤时间。要到达办公室，你必须按给定次序乘坐 n 趟列车。另给你一个长度为 n 的整数数组 dist ，其中 dist[i] 表示第 i 趟列车的行驶距离（单位是千米）。每趟列车均只能在整点发车，所以你可能需要在两趟列车之间等待一段时间。例如，第 1 趟列车需要 1.5 小时，那你必须再等待 0.5 小时，搭乘在第 2 小时发车的第 2 趟列车。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 返回能满足你准时到达办公室所要求全部列车的 最小正整数 时速（单位：千米每小时），如果无法准时到达，则返回 -1 。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 生成的测试用例保证答案不超过 10^7 ，且 hour 的小数点后最多存在两位数字 。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>牛客-合唱队解法</title><link>/post/niu-ke---he-chang-dui-jie-fa/</link><pubDate>Mon, 22 May 2023 20:23:21 +0800</pubDate><guid>/post/niu-ke---he-chang-dui-jie-fa/</guid><description>&lt;h2 id="描述">描述
&lt;a class="header-anchor" href="#%e6%8f%8f%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;p>牛客网题目: 
&lt;a href="https://www.nowcoder.com/practice/6d9d69e3898f45169a441632b325c7b4" title="合唱队" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 合唱队
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
N 位同学站成一排，音乐老师要请最少的同学出列，使得剩下的 K 位同学排成合唱队形。
通俗来说，能找到一个同学，他的两边的同学身高都依次严格降低的队形就是合唱队形。&lt;/p></description></item><item><title>牛客-四则运算解法</title><link>/post/niu-ke---si-ze-yun-suan-jie-fa/</link><pubDate>Sun, 21 May 2023 19:28:21 +0800</pubDate><guid>/post/niu-ke---si-ze-yun-suan-jie-fa/</guid><description>&lt;h2 id="描述">描述
&lt;a class="header-anchor" href="#%e6%8f%8f%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;p>牛客网题目: 
&lt;a href="https://www.nowcoder.com/practice/9999764a61484d819056f807d2a91f1e" title="四则运算" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 四则运算
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
输入一个表达式（用字符串表示）, 求这个表达式的值.
保证字符串中的有效字符包括[‘0’-‘9’],‘+’,‘-’, ‘*’,‘/’ ,‘(’， ‘)’,‘[’, ‘]’,‘{’ ,‘}’. 且表达式一定合法.&lt;/p>
&lt;p>数据范围：表达式计算结果和过程中满足∣val∣≤1000 ，字符串长度满足 1≤n≤1000&lt;/p></description></item><item><title>Flink Window Trigger 使用的正确姿势</title><link>/post/flinkwindowtrigger-shi-yong-de-zheng-que-zi-shi/</link><pubDate>Sun, 25 Dec 2022 09:39:52 +0800</pubDate><guid>/post/flinkwindowtrigger-shi-yong-de-zheng-que-zi-shi/</guid><description>&lt;h2 id="废话">废话
&lt;a class="header-anchor" href="#%e5%ba%9f%e8%af%9d">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>在使用 Flink DataStream API 进行流式数据聚合统计时, sink操作时, 都会用到 Trigger.&lt;/li>
&lt;li>以 Flink 1.11.x 版本为例, 查看 Trigger 的实现类主要有以下常用的 7 种:
&lt;ul>
&lt;li>&lt;code>EventTimeTrigger&lt;/code>: 事件时间触发器&lt;/li>
&lt;li>&lt;code>ProcessTimeTrigger&lt;/code>: 处理时间触发器&lt;/li>
&lt;li>&lt;code>ContinuousEventTimeTrigger&lt;/code>: 连续的事件时间触发器&lt;/li>
&lt;li>&lt;code>ContinuousProcessingTimeTrigger&lt;/code>: 连续的处理时间触发器&lt;/li>
&lt;li>&lt;code>CountTrigger&lt;/code>: 窗口数据条数触发器&lt;/li>
&lt;li>&lt;code>DeltaTrigger&lt;/code>: 窗口Delta指标触发器&lt;/li>
&lt;li>&lt;code>PurgingTrigger&lt;/code>: 窗口清除触发器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在实际的业务场景中, 使用最多的当属 ContinuousEventTimeTrigger 这个类了.&lt;/li>
&lt;/ul></description></item><item><title>Flink QuickStart</title><link>/post/quickstart-of-flink/</link><pubDate>Mon, 16 Nov 2020 18:05:05 +0800</pubDate><guid>/post/quickstart-of-flink/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>Apache Flink 是一个框架和分布式处理引擎，用于在无边界和有边界数据流上进行有状态的计算。&lt;/li>
&lt;li>Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。&lt;/li>
&lt;/ul>
&lt;h3 id="有界与无界数据流">有界与无界数据流
&lt;a class="header-anchor" href="#%e6%9c%89%e7%95%8c%e4%b8%8e%e6%97%a0%e7%95%8c%e6%95%b0%e6%8d%ae%e6%b5%81">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>无界流: 有定义流开始, 未定义流的结束; 持续产生数据, 需要以特定顺序摄取事件 (如事件的发生顺序), 以便能够推断结果的完整性.&lt;/li>
&lt;li>有界流: 既定义流的开始, 又定义流的结束; 可以在摄取所有的数据后进行排序计算, 并需要有序摄取, 有界流处理通常被称为批处理.&lt;/li>
&lt;/ul></description></item><item><title>Oracle GoldenGate 实时同步Oracle数据到Kafka安装及配置</title><link>/post/sync-oracle-data-to-kafka-in-real-time/</link><pubDate>Sat, 31 Oct 2020 19:11:32 +0800</pubDate><guid>/post/sync-oracle-data-to-kafka-in-real-time/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>MySQL实时同步到Kafk可以采用canal, Oracle实时同步到Kafka可以采用OGG, 配置过程比canal略复杂&lt;/li>
&lt;li>OGG即Oracle GoldenGate是Oracle的同步工具, 能够实现大量交易数据的实时捕捉、变换和投递，实现源数据库与目标数据库的数据同步，保持亚秒级的数据延迟。&lt;/li>
&lt;/ul></description></item><item><title>单双因素方差分析及Python实现</title><link>/post/anova-by-python/</link><pubDate>Sun, 26 Apr 2020 21:15:09 +0800</pubDate><guid>/post/anova-by-python/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>方差分析 (analysis of variance, ANOVA) 在20世纪20年代发展起来的一种统计方法, 由英国统计学家费希尔在进行试验设计时为解释试验数据而首先引入.&lt;/li>
&lt;li>方差分析就是通过检验个总体的均值是否相等来判断分类型自变量对数值型因变量是否有显著影响。&lt;/li>
&lt;li>从表面上看, 方差分析是检验多个总体均值是否相等的方法, 但本质上是它所研究的是分类型自变量对数值型因变量的影响. 例如, 变量之间有没有关系, 关系的强度如何等.&lt;/li>
&lt;li>根据所分析的分类型自变量多少, 可以分为单因素方差分析 (one-way analysis of variance) 和 双因素方差分析 (two-way analysis of variance) .&lt;/li>
&lt;/ul></description></item><item><title>机器学习中的特征工程</title><link>/post/featureenginering-of-machinelearning/</link><pubDate>Mon, 03 Feb 2020 15:42:32 +0800</pubDate><guid>/post/featureenginering-of-machinelearning/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>机器学习将数据拟合到数学模型中来获得结论或者做出预测。这些模型吸纳特征作为输入。特征就是原始数据某方面的数学表现。在机器学习流水线中特征位于数据和模型之间。&lt;/li>
&lt;li>特征工程是一项从数据中提取特征，然后转换成适合机器学习模型的格式的艺术。这是机器学习流水线关键的一步，因为正确的特征可以减轻建模的难度，并因此使流水线能输出更高质量的结果。&lt;/li>
&lt;li>数据和特征决定了机器学习的上限, 而模型和算法只是逼近这个上限而已.&lt;/li>
&lt;li>流程:
&lt;img src="/imgs/img-lazy-loading.gif" data-src="/img/feature_engineering-1.png" alt="img" />&lt;/li>
&lt;/ul></description></item><item><title>机器学习中的评估指标</title><link>/post/evaluation-of-machinelearning/</link><pubDate>Sun, 08 Sep 2019 22:48:09 +0800</pubDate><guid>/post/evaluation-of-machinelearning/</guid><description>&lt;h2 id="分类问题">分类问题
&lt;a class="header-anchor" href="#%e5%88%86%e7%b1%bb%e9%97%ae%e9%a2%98">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>当正负样本分布极不均衡时, 准确率将失去意义, 通常使用AUC作为指标&lt;/li>
&lt;/ul>
&lt;h3 id="混淆矩阵confusion-matrix">混淆矩阵（Confusion Matrix）
&lt;a class="header-anchor" href="#%e6%b7%b7%e6%b7%86%e7%9f%a9%e9%98%b5confusion-matrix">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>矩阵中的每一行代表实例的预测类别，每一列代表实例的真实类别。
&lt;img src="/imgs/img-lazy-loading.gif" data-src="/img/confusion_matrix.png" alt="img" />&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>真正(True Positive , TP)：被模型预测为正的正样本。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>假正(False Positive , FP)：被模型预测为正的负样本。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>假负(False Negative , FN)：被模型预测为负的正样本。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>真负(True Negative , TN)：被模型预测为负的负样本。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>真正率(True Positive Rate,TPR)：TPR=TP/(TP+FN)，即被预测为正的正样本数 /正样本实际数。 召回率
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>假正率(False Positive Rate,FPR) ：FPR=FP/(FP+TN)，即被预测为正的负样本数 /负样本实际数。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>假负率(False Negative Rate,FNR) ：FNR=FN/(TP+FN)，即被预测为负的正样本数 /正样本实际数。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>真负率(True Negative Rate,TNR)：TNR=TN/(TN+FP)，即被预测为负的负样本数 /负样本实际数/2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据仓库建模分层设计</title><link>/post/the-modeling-of-data-warehouse/</link><pubDate>Sun, 28 Jul 2019 15:10:48 +1100</pubDate><guid>/post/the-modeling-of-data-warehouse/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>数据仓库 （DataWarehouse）是一个面向主题的（Subject Oriented）、集成的（Integrate）、相对稳定的（Non-Volatile）、反映历史变化（Time Variant）的数据集合, 用于支持管理决策.&lt;/li>
&lt;li>将所有的业务数据经汇总处理, 构成数据仓库(DW)&lt;/li>
&lt;/ul>
&lt;h3 id="趋势">趋势
&lt;a class="header-anchor" href="#%e8%b6%8b%e5%8a%bf">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>数据仓库是伴随着企业信息化发展起来的, 在企业信息化的过程中, 随着信息化工具的升级和新工具的应用, 数据量变的越来越大, 数据格式越来越多, 决策要求越来越苛刻, 数据仓库技术也在不停的发展.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>实时数据仓库以满足实时化&amp;amp;自动化决策需求.&lt;/li>
&lt;li>大数据&amp;amp;数据湖以支持大量&amp;amp;复杂数据类型（文本、图像、视频、音频）.&lt;/li>
&lt;/ol></description></item><item><title>机器学习之决策树</title><link>/post/decision-tree-of-machinelearning/</link><pubDate>Sun, 19 May 2019 14:15:21 +0800</pubDate><guid>/post/decision-tree-of-machinelearning/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>是一种基本的分类与回归方法, 模型呈树形结构.&lt;/li>
&lt;li>学习步骤:
&lt;ol>
&lt;li>特征选择&lt;/li>
&lt;li>决策树的生成&lt;/li>
&lt;li>决策树的修剪&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul></description></item><item><title>多元统计之因子分析</title><link>/post/factor-analysis/</link><pubDate>Sat, 30 Mar 2019 14:01:32 +0800</pubDate><guid>/post/factor-analysis/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>研究观测变量变动的共同原因和特殊原因, 从而达到简化变量结构目的的多元统计方法&lt;/li>
&lt;/ul>
&lt;h3 id="应用">应用
&lt;a class="header-anchor" href="#%e5%ba%94%e7%94%a8">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>寻求变量的基本结构, 简化变量系统&lt;/li>
&lt;li>用于分类, 根据因子得分值, 在因子轴所构成的空间中将变量或者样本进行分类(能够分析样品间差异的原因)&lt;/li>
&lt;/ul>
&lt;h3 id="类型">类型
&lt;a class="header-anchor" href="#%e7%b1%bb%e5%9e%8b">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>R型因子分析&lt;/li>
&lt;li>Q型因子分析&lt;/li>
&lt;/ul></description></item><item><title>多元统计之主成分分析</title><link>/post/principle-component-analysis/</link><pubDate>Sat, 02 Mar 2019 11:55:02 +0800</pubDate><guid>/post/principle-component-analysis/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>主成分分析就是设法将原来指标重新组合成一组新的互相无关的几个综合指标来代替原来指标, 同时根据实际需要从中取几个较少的综合指标尽可能多地反映原来指标的信息。&lt;/li>
&lt;li>这种将多个指标转化为少数互相无关的综合指标的统计方法叫做主成分分析或称主分量分析。&lt;/li>
&lt;/ul>
&lt;h3 id="几何意义">几何意义
&lt;a class="header-anchor" href="#%e5%87%a0%e4%bd%95%e6%84%8f%e4%b9%89">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>代数观点:
&lt;ul>
&lt;li>p个原始变量的一些特殊的线性组合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>几何意义:
&lt;ul>
&lt;li>这些线性组合通过把由$X_1,X_2,\cdots,X_p$构成的坐标系旋转而产生的新坐标系。这样的新坐标轴使其通过样本变差最大的方向(或者说具有最大的样本方差)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>多元统计之判别分析</title><link>/post/discrimination-analysis/</link><pubDate>Sat, 23 Feb 2019 21:04:13 +0800</pubDate><guid>/post/discrimination-analysis/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>判别分析是判别样品所属类型的一种分析方法，是在分类确定的条件下，根据某一研究对象的各种特征值判别其类型归属问题的一种多变量统计分析方法。&lt;/li>
&lt;li>判别分析于聚类分析的功能差不多，区别在于，聚类分析之前，没有人知道具体的是怎么分的类，分了哪几大类。而判别分析是已经把类别给分好，要做的是把没有分好类的数据观测，按照之前分好的类再进行分类。这里不同于生活中常见的分类先有具体的分类逻辑（这里叫做判别函数）。所以判别分的难点在于先由分好类的数据观测找到一个或者多个判别函数，然后对未进行分类的观测按照该判别公式进行分类。&lt;/li>
&lt;/ul></description></item><item><title>多元统计之聚类分析</title><link>/post/cluster-analysis/</link><pubDate>Sun, 17 Feb 2019 22:09:27 +0800</pubDate><guid>/post/cluster-analysis/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>聚类分析是研究如何将研究对象按照多个方面的特征进行综合分类的一种统计方法&lt;/li>
&lt;li>聚类分析就是分析如何对样品(或变量)按照他们在性质上的亲疏程度进行量化分类的问题&lt;/li>
&lt;li>聚类分析有效解决了科学研究中多因素、多指标的分类问题&lt;/li>
&lt;/ul>
&lt;h3 id="类别">类别
&lt;a class="header-anchor" href="#%e7%b1%bb%e5%88%ab">&lt;/a>
&lt;/h3>&lt;h4 id="q型聚类">Q型聚类
&lt;a class="header-anchor" href="#q%e5%9e%8b%e8%81%9a%e7%b1%bb">&lt;/a>
&lt;/h4>&lt;ul>
&lt;li>对样品进行分类处理&lt;/li>
&lt;/ul>
&lt;h4 id="r型聚类">R型聚类
&lt;a class="header-anchor" href="#r%e5%9e%8b%e8%81%9a%e7%b1%bb">&lt;/a>
&lt;/h4>&lt;ul>
&lt;li>对变量进行分类处理&lt;/li>
&lt;/ul></description></item><item><title>统计中常用的分布</title><link>/post/the-common-distribution-of-statistics/</link><pubDate>Sun, 06 Jan 2019 13:47:51 +0800</pubDate><guid>/post/the-common-distribution-of-statistics/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;h3 id="相关概念">相关概念
&lt;a class="header-anchor" href="#%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5">&lt;/a>
&lt;/h3>&lt;ol>
&lt;li>随机变量:
&lt;ul>
&lt;li>设随机试验的样本空间为S(e) = {e}. X = X(e)是定义在样本空间S上的实值单值函数. 称X = X(e)为随机变量.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>离散型随机变量:
&lt;ul>
&lt;li>有些随机变量, 它全部可能取到的值是有限个或可列无限多个, 这种随机变量称为离散型随机变量.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Spark程序相关调优整理</title><link>/post/optimization-of-spark-program/</link><pubDate>Sun, 29 Jul 2018 11:37:31 +0800</pubDate><guid>/post/optimization-of-spark-program/</guid><description>&lt;h2 id="普通调优">普通调优
&lt;a class="header-anchor" href="#%e6%99%ae%e9%80%9a%e8%b0%83%e4%bc%98">&lt;/a>
&lt;/h2>&lt;h2 id="jvm调优">jvm调优
&lt;a class="header-anchor" href="#jvm%e8%b0%83%e4%bc%98">&lt;/a>
&lt;/h2>&lt;h2 id="数据倾斜">数据倾斜
&lt;a class="header-anchor" href="#%e6%95%b0%e6%8d%ae%e5%80%be%e6%96%9c">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>数据倾斜只会发生在 shuffle 过程中&lt;/li>
&lt;li>在进行 shuffle 的时候，必须将各个节点上相同的 key 拉取到某个节点上的一个 task 来进行处理，比如按照 key 进行聚合或 join 等操作。此时如果某个 key 对应的数据量特别大的话，就会发生数据倾斜。&lt;/li>
&lt;/ul></description></item><item><title>HDFS快速入门</title><link>/post/quickstart-of-hdfs/</link><pubDate>Sun, 15 Apr 2018 17:34:48 +0800</pubDate><guid>/post/quickstart-of-hdfs/</guid><description>&lt;h2 id="概述">概述
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>简介:
&lt;ul>
&lt;li>源自Google的GFS论文的巨大分布式文件系统&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>特点:
&lt;ol>
&lt;li>扩展性&lt;/li>
&lt;li>容错性&lt;/li>
&lt;li>海量数据存储&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>优缺点:
&lt;ul>
&lt;li>优点:
&lt;ol>
&lt;li>数据冗余, 硬件容错&lt;/li>
&lt;li>处理流式(一次写入多次读取)的数据访问&lt;/li>
&lt;li>适合存储大文件&lt;/li>
&lt;li>构建在廉价机器上&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺点:
&lt;ol>
&lt;li>不满足低延迟的数据访问&lt;/li>
&lt;li>不适合小文件的存储&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>存储:
&lt;ul>
&lt;li>将文件切分成指定大小的数据块并以多副本的存储在多个机器上&lt;/li>
&lt;li>数据的切分,多副本,容错等操作对用户透明&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>NameNode (Filename, numReplicas, block-ids)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>大数据集群CDH5.11.0搭建及配置</title><link>/post/install-and-conf-of-cdh5110/</link><pubDate>Sat, 31 Mar 2018 22:55:51 +0800</pubDate><guid>/post/install-and-conf-of-cdh5110/</guid><description>&lt;h2 id="环境">环境
&lt;a class="header-anchor" href="#%e7%8e%af%e5%a2%83">&lt;/a>
&lt;/h2>&lt;h3 id="系统环境">系统环境
&lt;a class="header-anchor" href="#%e7%b3%bb%e7%bb%9f%e7%8e%af%e5%a2%83">&lt;/a>
&lt;/h3>&lt;ol>
&lt;li>CentOS7 3台&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.237.100 hadoop001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.237.110 hadoop002
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.237.120 hadoop003
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>SSH免密登录&lt;/li>
&lt;li>关闭防火墙&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 关闭防火墙&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl stop firewalld
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 关闭开启自启&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl disable firewalld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>SELINUX关闭&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>setenforce &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="color:#e6db74">&amp;#34;s/SELINUX=enforcing/SELINUX=disabled/&amp;#34;&lt;/span> /etc/selinux/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iptables --flush
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reboot &lt;span style="color:#75715e">#重启生效&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>ElasticSearch6.3搭建快速入门</title><link>/post/quickstart-of-elasticsearch63/</link><pubDate>Sun, 25 Feb 2018 20:23:32 +0800</pubDate><guid>/post/quickstart-of-elasticsearch63/</guid><description>&lt;h2 id="快速入门">快速入门
&lt;a class="header-anchor" href="#%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>Elasticsearch是一个实时分布式搜索和分析引擎&lt;/li>
&lt;/ul>
&lt;h3 id="环境">环境
&lt;a class="header-anchor" href="#%e7%8e%af%e5%a2%83">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>java 1.8+&lt;/li>
&lt;li>ubuntu 14.04/16.04&lt;/li>
&lt;/ul>
&lt;h3 id="版本说明">版本说明
&lt;a class="header-anchor" href="#%e7%89%88%e6%9c%ac%e8%af%b4%e6%98%8e">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>5.X之后的字段类型不再支持string，由text或keyword取代&lt;/li>
&lt;li>6.3支持sql&lt;/li>
&lt;/ul></description></item><item><title>数据结构基础之图</title><link>/post/graph-of-datastructure/</link><pubDate>Sun, 24 Dec 2017 22:44:10 +0800</pubDate><guid>/post/graph-of-datastructure/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>概念:
&lt;ul>
&lt;li>由顶点的有穷非空集合和顶点之间边的集合组成, 通常表示为: G(V,E), 其中, G表示一个图, V是图G中顶点的集合, E是图G中边的集合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>异同:
&lt;ul>
&lt;li>线性表中把数据元素叫做元素, 树中将数据元素叫结点, 在图中数据元素叫做顶点(Vertex)&lt;/li>
&lt;li>线性表中可以没有数据元素,称为空表; 树中可以没有结点,叫做空树; 图中不允许没有顶点,若V是顶点的集合, 则集合V有穷且非空&lt;/li>
&lt;li>线性表中, 相邻的数据元素具有线性关系; 树结构中, 相邻两层的结点具有层次关系; 图中, 任意两个顶点之间都可能有关系, 顶点之间的逻辑关系用边来表示, 边集可以是空&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="相关定义">相关定义
&lt;a class="header-anchor" href="#%e7%9b%b8%e5%85%b3%e5%ae%9a%e4%b9%89">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>无向边:
&lt;ul>
&lt;li>若顶点vi, vj之间的边没有方向, 则称这条边为无向边, 用无序偶对(vi,vj)来表示&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>无向图:
&lt;ul>
&lt;li>如果图中任意两个顶点之间的边都是无向边, 则称该图为无向图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>无向完全图:
&lt;ul>
&lt;li>在无向图中, 如果任意两个顶点之间都存在边, 则称该图为无向完全图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有向边:
&lt;ul>
&lt;li>若从顶点vi到vj之间的边有方向, 则称这条边为有向边, 也称为弧(Arc), 用有序偶&amp;lt;vi,vj&amp;gt;来表示, vi称为狐尾(Tail), vj称为弧头(Head)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有向图(Directed graphs):
&lt;ul>
&lt;li>如果图中任意两个顶点之间的边都是有向边, 则称该图为有向图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有向完全图:
&lt;ul>
&lt;li>在有向图中, 如果任意两个顶点之间都存在方向互为相反的两条弧, 则称该图为有向完全图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>简单图:
&lt;ul>
&lt;li>在图中, 若不存在顶点到其自身的边, 且同一条边不重复出现, 则称这样的图为简单图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>权(Weight): 与图的边或弧相关的数&lt;/li>
&lt;li>网(NetWork): 带权的图&lt;/li>
&lt;li>子图:
&lt;ul>
&lt;li>假设有两个图G=(V,{E}), G&amp;rsquo;=(V&amp;rsquo;,{E&amp;rsquo;}), 如果V&amp;rsquo;包含于V, 且E&amp;rsquo;包含于E, 则称G&amp;rsquo;为G的子图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>数据结构基础之树</title><link>/post/tree-of-datastructure/</link><pubDate>Sat, 18 Nov 2017 12:34:41 +0800</pubDate><guid>/post/tree-of-datastructure/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>概念: 为n(n&amp;gt;=0)个结点的有限集。n=0时为空树。&lt;/li>
&lt;li>特点: 在任意一棵非空树中
&lt;ul>
&lt;li>有且仅有一个特定的称为根(Root)的结点&lt;/li>
&lt;li>当n&amp;gt;1时, 其余结点可以分为m(m&amp;gt;0)个互不相交的有限集T1、T2、&amp;hellip;&amp;hellip;、Tm, 其中每一个集合本身又是一棵树, 并且称为根的子树(SubTree)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="结点分类">结点分类
&lt;a class="header-anchor" href="#%e7%bb%93%e7%82%b9%e5%88%86%e7%b1%bb">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>根结点: 无双亲, 唯一&lt;/li>
&lt;li>叶结点: 无孩子, 可以多个&lt;/li>
&lt;li>中间结点: 一个双亲多个孩子&lt;/li>
&lt;/ul></description></item><item><title>数据结构之线性表</title><link>/post/linerlist-of-datastructure/</link><pubDate>Sun, 15 Oct 2017 16:49:20 +0800</pubDate><guid>/post/linerlist-of-datastructure/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>概念: 零个或多个数据元素的有限序列&lt;/li>
&lt;/ul>
&lt;h2 id="抽象数据类型定义">抽象数据类型定义
&lt;a class="header-anchor" href="#%e6%8a%bd%e8%b1%a1%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e5%ae%9a%e4%b9%89">&lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>ADT 线性表List
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	线性表的数据对象集合为{a1,a2,...,an}, 每个元素的类型均为DataType, 除第一个元素a1外,每一个元素有且只有一个直接前驱元素, 除了最后一个元素an外, 每一个元素有且只有直接后驱元素。数据元素之间的关系是一对一的关系
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitList(*L): 初始化操作, 构造一个空的线性表L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListEmpty(L): 若线性表L为空表，则返回TRUE，否则返回FALSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ClearList(*L): 将线性表置空
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GetElem(L,i,*e):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 初始条件：线性表已存在（1≤i≤ListLenght(L)）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 操作结果：用e返回线性表L中第i个数据元素的值
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locatElem(L,e): 在线性表中查找与给定值e相等的元素, 如果查找成功, 返回该元素在表中的序号表示成功; 否则, 返回0表示失败
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListInsert(*L,i,e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 初始条件：线性表已存在（1≤i≤ListLenght(L)+1）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 操作结果：在线性表L中第i个数据元素之前插入新元素e，L长度加1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListDelete(*L,i,&amp;amp;e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 初始条件：线性表已存在（1≤i≤ListLenght(L)）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 操作结果：删除线性表L中第i个数据元素，用e返回其值，L长度减1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListLenght(L)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 初始条件：线性表已存在
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 操作结果：返回线性表L数据元素个数
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end ADT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Pyhton中的时间模块</title><link>/post/datetime-module-of-python/</link><pubDate>Wed, 05 Oct 2016 17:40:03 +0800</pubDate><guid>/post/datetime-module-of-python/</guid><description>&lt;h2 id="获取当前日期和时间">获取当前日期和时间
&lt;a class="header-anchor" href="#%e8%8e%b7%e5%8f%96%e5%bd%93%e5%89%8d%e6%97%a5%e6%9c%9f%e5%92%8c%e6%97%b6%e9%97%b4">&lt;/a>
&lt;/h2>&lt;h3 id="使用time模块">使用time模块
&lt;a class="header-anchor" href="#%e4%bd%bf%e7%94%a8time%e6%a8%a1%e5%9d%97">&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(time&lt;span style="color:#f92672">.&lt;/span>strftime(&lt;span style="color:#e6db74">&amp;#39;%Y-%m-&lt;/span>&lt;span style="color:#e6db74">%d&lt;/span>&lt;span style="color:#e6db74"> %H:%M:%S&amp;#39;&lt;/span>, time&lt;span style="color:#f92672">.&lt;/span>localtime(time&lt;span style="color:#f92672">.&lt;/span>time())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Out: 2016-12-08 17:14:29&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用datetime模块">使用datetime模块
&lt;a class="header-anchor" href="#%e4%bd%bf%e7%94%a8datetime%e6%a8%a1%e5%9d%97">&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> datetime &lt;span style="color:#f92672">import&lt;/span> datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> datetime &lt;span style="color:#f92672">import&lt;/span> date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>today &lt;span style="color:#f92672">=&lt;/span> date&lt;span style="color:#f92672">.&lt;/span>today()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(str(today&lt;span style="color:#f92672">.&lt;/span>year) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(today&lt;span style="color:#f92672">.&lt;/span>month) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(today&lt;span style="color:#f92672">.&lt;/span>day)) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Out: 2016-12-8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(today&lt;span style="color:#f92672">.&lt;/span>strftime(&lt;span style="color:#e6db74">&amp;#39;%Y-%m-&lt;/span>&lt;span style="color:#e6db74">%d&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Out: 2016-12-08&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>now &lt;span style="color:#f92672">=&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>now()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(now&lt;span style="color:#f92672">.&lt;/span>strftime(&lt;span style="color:#e6db74">&amp;#39;%Y-%m-&lt;/span>&lt;span style="color:#e6db74">%d&lt;/span>&lt;span style="color:#e6db74"> %H:%M:%S&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Out: 2016-12-08 17:14:29&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Android中的WebView使用总结</title><link>/post/summary-of-android-webview/</link><pubDate>Sat, 03 Sep 2016 21:03:19 +0800</pubDate><guid>/post/summary-of-android-webview/</guid><description>&lt;h2 id="用途">用途
&lt;a class="header-anchor" href="#%e7%94%a8%e9%80%94">&lt;/a>
&lt;/h2>&lt;h3 id="加载网页">加载网页
&lt;a class="header-anchor" href="#%e5%8a%a0%e8%bd%bd%e7%bd%91%e9%a1%b5">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>说明:默认会打开自带的浏览器,使用WebView去加载,则需复写shouldOverrideUrlLoading方法,并返回为true&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>mWebView.&lt;span style="color:#a6e22e">setWebViewClient&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> WebViewClient(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">shouldOverrideUrlLoading&lt;/span>(WebView view, String url) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> view.&lt;span style="color:#a6e22e">loadUrl&lt;/span>(url);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//返回值是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>return值的说明:
&lt;ul>
&lt;li>true: 在打开新的url时WebView就不会再加载这个url了，所有处理都需要在WebView中操作，包含加载&lt;/li>
&lt;li>false(默认): 系统就认为上层没有做处理，接下来还是会继续加载这个url的
&lt;ul>
&lt;li>如果我们拦截了某个url，那么return false 和 return true区别不大，所以一般建议 return false&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Java中的常见7种排序算法</title><link>/post/seven-common-sort-algorithm-of-java/</link><pubDate>Sun, 13 Mar 2016 10:21:17 +0800</pubDate><guid>/post/seven-common-sort-algorithm-of-java/</guid><description>&lt;h2 id="简介">简介
&lt;a class="header-anchor" href="#%e7%ae%80%e4%bb%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>定义:
&lt;ul>
&lt;li>假设有n个记录的序列为{r1,r2,&amp;hellip;,rn}, 其相应的关键字分别为{k1,k2,&amp;hellip;,kn}, 需确定1,2,&amp;hellip;,n的一种排列p1,p2,&amp;hellip;,pn, 使其相应的关键字满足k_p1 &amp;lt;= k_p2 &amp;lt;= &amp;hellip; &amp;lt;= k_pn (非递减或非递增)关系, 即使得序列成为一个按关键字 有序的序列{r_p1,r_p2,&amp;hellip;,r_pn}, 这样的操作就称为排序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>说明:
&lt;ul>
&lt;li>排序可以看成是线性表的一种操作&lt;/li>
&lt;li>排序的依据是关键字之间的大小关系&lt;/li>
&lt;li>组合排序可以将主关键字与次关键字拼成字符串, 转化成单关键字排序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Java基础之网络编程</title><link>/post/network-of-java/</link><pubDate>Sun, 19 Jul 2015 17:49:26 +0800</pubDate><guid>/post/network-of-java/</guid><description>&lt;h2 id="网络编程概述">网络编程概述
&lt;a class="header-anchor" href="#%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h2>&lt;p>网络编程的本质是两个设备之间的数据交换（把一个设备中的数据发送给两外一个设备，然后接受另外一个设备反馈的数据）。&lt;/p>
&lt;h3 id="网络模型">网络模型
&lt;a class="header-anchor" href="#%e7%bd%91%e7%bb%9c%e6%a8%a1%e5%9e%8b">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>OSI参考模型&lt;/li>
&lt;li>TCP/IP 参考模型&lt;/li>
&lt;/ul></description></item><item><title>Io of Javase Part2</title><link>/post/io-of-javase-part2/</link><pubDate>Sun, 07 Jun 2015 17:39:07 +0800</pubDate><guid>/post/io-of-javase-part2/</guid><description>&lt;h2 id="io包中的其他类">IO包中的其他类
&lt;a class="header-anchor" href="#io%e5%8c%85%e4%b8%ad%e7%9a%84%e5%85%b6%e4%bb%96%e7%b1%bb">&lt;/a>
&lt;/h2>&lt;h3 id="打印流">打印流
&lt;a class="header-anchor" href="#%e6%89%93%e5%8d%b0%e6%b5%81">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>PrintWriter与PrintStream：可以直接操作输入流和文件，都属于输出流，分别针对字符和字节。&lt;/li>
&lt;li>调用 println 方法有自动 flush 功能&lt;/li>
&lt;li>PrintWriter 和 PrintStream 重载的 print()和 println()用于多种数据类型的输出。&lt;/li>
&lt;li>print()里的参数不能为空；println()可以&lt;/li>
&lt;/ul></description></item><item><title>Java基础之IO操作（上）</title><link>/post/io-of-javase-part1/</link><pubDate>Sat, 06 Jun 2015 17:39:02 +0800</pubDate><guid>/post/io-of-javase-part1/</guid><description>&lt;h2 id="io流">IO流
&lt;a class="header-anchor" href="#io%e6%b5%81">&lt;/a>
&lt;/h2>&lt;h3 id="概述">概述：
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>用来处理设备之间的数据传输。Java对数据的操作是通过流的方式。Java用于操作流的对象都在IO包中。&lt;/li>
&lt;/ul>
&lt;h3 id="分类按操作数据">分类(按操作数据)：
&lt;a class="header-anchor" href="#%e5%88%86%e7%b1%bb%e6%8c%89%e6%93%8d%e4%bd%9c%e6%95%b0%e6%8d%ae">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>字符流的抽象基类：
&lt;ul>
&lt;li>Reader
&lt;ul>
&lt;li>BuffedReader(字符读取流缓冲区)&lt;/li>
&lt;li>InputStreamReader（转换流）
&lt;ul>
&lt;li>FileReader&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Writer
&lt;ul>
&lt;li>PrintWrite&lt;/li>
&lt;li>BuffedWriter(字符输出流缓冲区)&lt;/li>
&lt;li>OutputStreamWriter（转换流）
&lt;ul>
&lt;li>FileWriter&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>java基础之集合（下）</title><link>/post/collection-of-java-part2/</link><pubDate>Sun, 17 May 2015 17:28:54 +0800</pubDate><guid>/post/collection-of-java-part2/</guid><description>&lt;h2 id="map集合">Map集合
&lt;a class="header-anchor" href="#map%e9%9b%86%e5%90%88">&lt;/a>
&lt;/h2>&lt;h3 id="概述">概述：
&lt;a class="header-anchor" href="#%e6%a6%82%e8%bf%b0">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>该集合存储键值对。一次添加一对，而且要保证键的唯一性。&lt;/li>
&lt;li>嵌套类摘要 static interface Map.Entry&amp;lt;K,V&amp;gt; 映射项（键*值对）。&lt;/li>
&lt;/ul>
&lt;h3 id="常用方法">常用方法：
&lt;a class="header-anchor" href="#%e5%b8%b8%e7%94%a8%e6%96%b9%e6%b3%95">&lt;/a>
&lt;/h3></description></item><item><title>java基础之集合（上）</title><link>/post/collection-of-java-part1/</link><pubDate>Sun, 10 May 2015 17:28:48 +0800</pubDate><guid>/post/collection-of-java-part1/</guid><description>&lt;h2 id="集合类">集合类
&lt;a class="header-anchor" href="#%e9%9b%86%e5%90%88%e7%b1%bb">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象的操作，就要对对象进行存储，集合就是存储对象最常用的一种方式。&lt;/li>
&lt;li>集合特点：
&lt;ul>
&lt;li>用于存储对象的容器。&lt;/li>
&lt;li>集合的长度是可变的。&lt;/li>
&lt;li>集合中不可以存储基本数据类型值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>集合容器因为内部的数据结构不同，有多种具体容器。不断的向上抽取，就形成了集合框架。&lt;/li>
&lt;/ul></description></item><item><title>Java基础之多线程</title><link>/post/multi-thread-of-java/</link><pubDate>Sun, 19 Apr 2015 17:23:26 +0800</pubDate><guid>/post/multi-thread-of-java/</guid><description>&lt;h2 id="进程线程和多线程">进程、线程和多线程
&lt;a class="header-anchor" href="#%e8%bf%9b%e7%a8%8b%e7%ba%bf%e7%a8%8b%e5%92%8c%e5%a4%9a%e7%ba%bf%e7%a8%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>进程：正在进行中的程序（直译）。&lt;/li>
&lt;li>线程：进程中一个负责程序执行的控制单元（执行路径）。&lt;/li>
&lt;li>多线程：一个进程中可以有多个执行路径，称之为多线程。
&lt;ul>
&lt;li>好处：解决了多部分代码同时运行的问题。&lt;/li>
&lt;li>弊端：线程太多，会导致效率的降低。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Java基础之常用类</title><link>/post/the-common-class-of-java/</link><pubDate>Sun, 05 Apr 2015 13:57:58 +0800</pubDate><guid>/post/the-common-class-of-java/</guid><description>&lt;h2 id="object类">Object类
&lt;a class="header-anchor" href="#object%e7%b1%bb">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>类 Object 是类层次结构的根类。每个类都使用 Object 作为&lt;strong>超类&lt;/strong>。所有对象（包括数组）都实现这个类的方法。&lt;/li>
&lt;/ul></description></item><item><title>关于</title><link>/about/</link><pubDate>Sun, 05 Apr 2015 13:54:22 +0800</pubDate><guid>/about/</guid><description/></item><item><title>站点示例</title><link>/flinks.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/flinks.html</guid><description>如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Patrick desc: Once start, goes forward! avatar: https://blog.yaoyuehome.com/img/avatar.jpg link: https://blog.yaoyuehome.com</description></item></channel></rss>